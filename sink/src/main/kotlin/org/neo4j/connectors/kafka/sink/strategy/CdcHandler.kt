/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.neo4j.connectors.kafka.sink.strategy

import org.apache.kafka.connect.data.Struct
import org.apache.kafka.connect.errors.ConnectException
import org.neo4j.cdc.client.model.ChangeEvent
import org.neo4j.connectors.kafka.data.ChangeEventExtensions.toChangeEvent
import org.neo4j.connectors.kafka.sink.SinkMessage
import org.neo4j.connectors.kafka.sink.SinkStrategyHandler

abstract class CdcHandler : SinkStrategyHandler {

  override fun handle(messages: Iterable<SinkMessage>) {
    if (messages.any { !it.isCdcMessage() }) {
      throw ConnectException(
          "At least one message is not a CDC event message that has been generated by Neo4j Connector for Kafka")
    }
  }
}

// TODO: throw an exception with the message so that we can log what's wrong with the message
internal fun SinkMessage.toChangeEvent(): ChangeEvent =
    when {
      this.isCdcMessage() -> parseCdcChangeEvent(this)
      else -> parseStreamsChangeEvent(this)!!
    }

internal fun parseCdcChangeEvent(message: SinkMessage): ChangeEvent =
    when (val value = message.value) {
      is Struct -> value.toChangeEvent()
      else ->
          throw IllegalArgumentException("unexpected message value type ${value?.javaClass?.name}")
    }

internal fun parseStreamsChangeEvent(message: SinkMessage): ChangeEvent? {
  return when (val value = message.value) {
    is Struct -> null
    else ->
        throw IllegalArgumentException("unexpected message value type ${value?.javaClass?.name}")
  }
}
