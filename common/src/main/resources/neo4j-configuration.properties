##
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
neo4j.uri=Type: List<String>;\nDescription: Neo4j URI to connect to. Multiple URIs can be specified.
neo4j.database=Type: String;\nDescription: Neo4j database name to connect to. Recommended to be specified explicitly.
neo4j.authentication.type=Type: Enum[NONE, BASIC, KERBEROS, BEARER, CUSTOM];\nDescription: Authentication type to use.
neo4j.authentication.basic.username=Type: String;\nDescription: Username to authenticate with.
neo4j.authentication.basic.password=Type: Password;\nDescription: Password to authenticate with.
neo4j.authentication.basic.realm=Type: String;\nDescription: Authentication realm to authenticate with, leave empty for default.
neo4j.authentication.kerberos.ticket=Type: Password;\nDescription: Kerberos ticket to establish connection with.
neo4j.authentication.bearer.token=Type: Password;\nDescription: Bearer token to establish connection with.
neo4j.authentication.custom.scheme=Type: String;\nDescription: Custom authentication scheme to establish connection with.
neo4j.authentication.custom.principal=Type: String;\nDescription: Custom principal to establish connection with.
neo4j.authentication.custom.credentials=Type: Password;\nDescription: Custom credential to authenticate with.
neo4j.authentication.custom.realm=Type: String;\nDescription: Custom authentication realm to authenticate with, set as required by your custom authentication provider.
neo4j.security.encrypted=Type: Boolean;\nDescription: Whether encryption is enabled. Only applicable when `bolt` or `neo4j` schemes are used inside `neo4j.uri`.
neo4j.security.hostname-verification-enabled=Type: Boolean\n;Description: Whether hostname verification is enabled during TLS handshake.
neo4j.security.trust-strategy=Type: Enum[TRUST_ALL_CERTIFICATES, TRUST_CUSTOM_CA_SIGNED_CERTIFICATES, TRUST_SYSTEM_CA_SIGNED_CERTIFICATES];\nDescription: Trust strategy to use for TLS connections.
neo4j.security.cert-files=Type: List<File>;\nDescription: List of files that contain X509 certificates of CAs to trust.
neo4j.connection-timeout=Type: Duration;\nDescription: TCP connection timeout (valid units are: `ms`, `s`, `m`, `h` and `d`; default unit is `s`).
neo4j.pool.max-connection-pool-size=Type: Integer;\nDescription: Maximum number of connections to keep in the connection pool.
neo4j.pool.connection-acquisition-timeout=Type: Duration;\nDescription: Maximum duration to wait for acquiring a connection from the connection pool (valid units are: `ms`, `s`, `m`, `h` and `d`; default unit is `s`).
neo4j.pool.idle-time-before-connection-test=Type: Duration;\nDescription: Duration after which idle connections are tested for liveness (valid units are: `ms`, `s`, `m`, `h` and `d`; default unit is `s`).
neo4j.pool.max-connection-lifetime=Type: Duration;\nDescription: Duration after which a connection is dropped from the connection pool (valid units are: ``ms`, `s`, `m`, `h` and `d`; default unit is `s`).
neo4j.max-retry-time=Type: Duration;\nDescription: Maximum duration to retry a transaction.
neo4j.max-retry-attempts=Type: Integer;\nDescription: Maximum number of attempts during the duration specified by `neo4j.max-retry-time`.